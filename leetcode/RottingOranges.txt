void getAdj(vector<vector<int>>& grid,int i,int j,queue<pair<int,int>>& q){
        if(i+1<grid.size()&& grid[i+1][j]==1){
            q.push(make_pair(i+1,j));
            grid[i+1][j]=2;
        }
        if(i-1>=0&& grid[i-1][j]==1){
            q.push(make_pair(i-1,j));
            grid[i-1][j]=2;
        }
        if(j+1<grid[0].size()&& grid[i][j+1]==1){
            q.push(make_pair(i,j+1));
            grid[i][j+1]=2;
        }
        if(j-1>=0&& grid[i][j-1]==1){
            q.push(make_pair(i,j-1));
            grid[i][j-1]=2;
        }
        
    }
    int orangesRotting(vector<vector<int>>& grid) {
        queue<pair<int,int>> q;
        int time=0,fresh=0;
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]==2){
                    q.push(make_pair(i,j));
                }
                else if(grid[i][j]==1){
                    fresh++;
                }
            }
        }
        while(!q.empty()&&fresh>0){
            int s=q.size();
            for(int i=0;i<s;i++){
                auto it=q.front();
                q.pop();
                getAdj(grid,it.first,it.second,q);
            }
            fresh-=q.size();
            time++;
        }
        return fresh==0?time:-1;
    }