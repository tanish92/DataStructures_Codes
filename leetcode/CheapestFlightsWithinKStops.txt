int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int K) {
        
        vector<vector<pair<int,int>>> graph(n);
        
        for(int i=0;i<flights.size();i++){
            graph[flights[i][0]].push_back(make_pair(flights[i][1],flights[i][2]));
        }
        int mincost=INT_MAX;
        K++;
        
        queue<pair<int,int>> q;
        q.push(make_pair(src,0));
        int l=0;
        
        while(!q.empty()&&l<=K){
            l++;
            int count=q.size();
            
            while(count--){
                int node=q.front().first;
                int cost = q.front().second;
                q.pop();
                
                if(cost>mincost)
                    continue;
                
                if(node==dst){
                    mincost=min(cost,mincost);
                    continue;
                }
                
                for(int i=0;i<graph[node].size();i++){
                    q.push(make_pair(graph[node][i].first,graph[node][i].second + cost));
                }
            }
            
        }
        if(mincost==INT_MAX){
            return -1;
        }
        return mincost;
    }